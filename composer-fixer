#!/usr/bin/env php
<?php

declare(strict_types=1);

/**
 * This file is part of the guanguans/laravel-exception-notify.
 *
 * (c) guanguans <ityaozm@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled.
 */

use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Process\PhpExecutableFinder;
use Symfony\Component\Process\Process;

require __DIR__.'/vendor/autoload.php';

(new class {
    private SymfonyStyle $symfonyStyle;
    private string $composerJsonFile;
    private string $composerBinary;
    private string $highestComposerBinary;
    private array $exceptPackageNames;
    private array $exceptPackageVersions;

    public function __construct()
    {
        $this->symfonyStyle = new SymfonyStyle(new ArgvInput, new ConsoleOutput);
        $this->composerJsonFile = __DIR__.'/composer.json';
        $this->composerBinary = $this->findComposerBinary();
        $this->highestComposerBinary = $this->findComposerBinary('/opt/homebrew/opt/php@8.3/bin/php');
        $this->exceptPackageNames = [
        ];
        $this->exceptPackageVersions = [
            '*',
            '-',
            '@',
        ];
    }

    public function __invoke(): void
    {
        $this
            ->updateComposerPackages()
            ->updateOutdatedComposerPackages()
            ->updateComposerPackages()
            ->normalizeComposerJson()
            ->success();
    }

    private function updateComposerPackages(): self
    {
        $this->createAndMustRunProcess("$this->composerBinary update -W --ansi -v");

        return $this;
    }

    /**
     * @noinspection JsonEncodingApiUsageInspection
     */
    private function updateOutdatedComposerPackages(): self
    {
        file_put_contents(
            $this->composerJsonFile,
            json_encode(
                $this->getOutdatedDecodedComposerJson(),
                JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES
            ).PHP_EOL
        );

        return $this;
    }

    private function normalizeComposerJson(): self
    {
        $this->createAndMustRunProcess("$this->composerBinary normalize --diff --ansi -v");

        return $this;
    }

    private function success(): void
    {
        $this->symfonyStyle->success('Composer packages updated successfully!');

        exit(0);
    }

    /**
     * @noinspection JsonEncodingApiUsageInspection
     */
    private function getOutdatedDecodedComposerJson(): array
    {
        $outdatedComposerPackages = (function (): array {
            $outdatedPackages = json_decode(
                $this
                    ->createAndMustRunProcess("$this->highestComposerBinary outdated --format=json --direct --ansi -v")
                    ->getOutput(),
                true
            )['installed'];

            $outdatedPackages = array_filter(
                $outdatedPackages,
                fn (array $package): bool => ! $this->strIs($this->exceptPackageNames, $package['name']) && ! $this->strIs(
                    $this->exceptPackageVersions,
                    $package['version']
                )
            );

            $versionResolver = static fn (string $version): array => array_slice(
                explode('.', ltrim($version, 'v'), 3),
                0,
                2
            );

            return array_map(
                static function (array $package) use ($versionResolver): array {
                    $dependencyLowestVersion = $versionResolver($package['version']);
                    $dependencyHighestVersion = $versionResolver($package['latest']);

                    $dependencyVersion = '^'.implode('.', $dependencyLowestVersion);
                    if ($dependencyLowestVersion[0] !== $dependencyHighestVersion[0]) {
                        $dependencyVersion .= ' || '.implode(' || ', array_map(
                            static fn (string $major): string => "^$major.0",
                            range($dependencyLowestVersion[0] + 1, $dependencyHighestVersion[0])
                        ));
                    }

                    $package['dependency_version'] = $dependencyVersion;

                    return $package;
                },
                $outdatedPackages
            );
        })();

        $decodedComposerJson = json_decode(file_get_contents($this->composerJsonFile), true);

        foreach ($outdatedComposerPackages as $composerOutdatedPackage) {
            foreach (['require', 'require-dev'] as $environment) {
                if (isset($decodedComposerJson[$environment][$composerOutdatedPackage['name']])) {
                    $decodedComposerJson[$environment][$composerOutdatedPackage['name']] = $composerOutdatedPackage['dependency_version'];
                }
            }
        }

        return $decodedComposerJson;
    }

    private function findComposerBinary(?string $phpBinary = null): string
    {
        return sprintf(
            '%s %s',
            $phpBinary ?? (new PhpExecutableFinder)->find(),
            (new Symfony\Component\Process\ExecutableFinder)->find('composer')
        );
    }

    /**
     * @param array|string $command
     * @param mixed $input The input as stream resource, scalar or \Traversable, or null for no input
     */
    private function createAndMustRunProcess(
        $command,
        ?string $cwd = null,
        ?array $env = null,
        $input = null,
        ?float $timeout = 60
    ): Process {
        $process = is_string($command)
            ? Process::fromShellCommandline($command, $cwd, $env, $input, $timeout)
            : new Process($command, $cwd, $env, $input, $timeout);

        $this->symfonyStyle->warning($process->getCommandLine());

        return $process
            ->setWorkingDirectory(dirname($this->composerJsonFile))
            ->setEnv(['COMPOSER_MEMORY_LIMIT' => -1])
            ->mustRun(fn (string $type, string $buffer) => $this->symfonyStyle->write($buffer));
    }

    /**
     * @param array|string $pattern
     *
     * @noinspection SuspiciousLoopInspection
     */
    private function strIs($pattern, string $value): bool
    {
        $patterns = (array) $pattern;
        // $value = (string) $value;
        if (empty($patterns)) {
            return false;
        }

        foreach ($patterns as $pattern) {
            $pattern = (string) $pattern;
            if ($pattern === $value) {
                return true;
            }

            $pattern = preg_quote($pattern, '#');
            $pattern = str_replace('\*', '.*', $pattern);
            if (1 === preg_match('#^'.$pattern.'\z#u', $value)) {
                return true;
            }
        }

        return false;
    }
})();
